{
    "todoComponents": [
      {
        "name": "Modern Minimalist",
        "description": "Clean, simple design with subtle transitions",
        "code": "function App() {\n    const [task, setTask] = useState(\"\");\n    const [tasks, setTasks] = useState([]);\n    \n    const addTask = (e) => {\n      e.preventDefault();\n      if (task.trim()) {\n        setTasks([...tasks, { id: Date.now(), text: task, completed: false }]);\n        setTask(\"\");\n      }\n    };\n    \n    const toggleTask = (id) => {\n      setTasks(tasks.map(task => \n        task.id === id ? { ...task, completed: !task.completed } : task\n      ));\n    };\n    \n    return (\n      <div className=\"max-w-md mx-auto p-6 bg-white rounded-lg shadow-lg\">\n        <h1 className=\"text-3xl font-light mb-6 text-gray-800\">minimalist tasks</h1>\n        <form onSubmit={addTask} className=\"mb-6\">\n          <input\n            type=\"text\"\n            value={task}\n            onChange={(e) => setTask(e.target.value)}\n            className=\"w-full p-2 border-b border-gray-300 focus:border-blue-500 outline-none transition-colors\"\n            placeholder=\"What needs to be done?\"\n          />\n        </form>\n        <ul className=\"space-y-3\">\n          {tasks.map(task => (\n            <li key={task.id} className=\"flex items-center gap-3\">\n              <input\n                type=\"checkbox\"\n                checked={task.completed}\n                onChange={() => toggleTask(task.id)}\n                className=\"w-4 h-4 border-2 border-gray-300 rounded-full\"\n              />\n              <span className={`${task.completed ? \"line-through text-gray-400\" : \"text-gray-800\"}`}>\n                {task.text}\n              </span>\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }"
      },
      {
        "name": "Colorful Playful",
        "description": "Fun, vibrant design with random color assignments",
        "code": "function App() {\n    const [newTask, setNewTask] = useState(\"\");\n    const [todos, setTodos] = useState([]);\n    \n    const colors = [\n      \"bg-pink-200\", \"bg-purple-200\", \"bg-blue-200\", \n      \"bg-green-200\", \"bg-yellow-200\", \"bg-orange-200\"\n    ];\n    \n    const handleSubmit = (e) => {\n      e.preventDefault();\n      if (newTask.trim()) {\n        setTodos([...todos, {\n          id: Date.now(),\n          text: newTask,\n          color: colors[Math.floor(Math.random() * colors.length)]\n        }]);\n        setNewTask(\"\");\n      }\n    };\n    \n    const removeTask = (id) => {\n      setTodos(todos.filter(todo => todo.id !== id));\n    };\n    \n    return (\n      <div className=\"max-w-md mx-auto p-6 bg-gradient-to-r from-pink-100 to-purple-100 rounded-xl shadow-xl\">\n        <h1 className=\"text-4xl font-bold mb-6 text-center bg-clip-text text-transparent bg-gradient-to-r from-pink-500 to-purple-500\">\n          Fun Todo List!\n        </h1>\n        <form onSubmit={handleSubmit} className=\"mb-6\">\n          <input\n            type=\"text\"\n            value={newTask}\n            onChange={(e) => setNewTask(e.target.value)}\n            className=\"w-full p-3 rounded-full shadow-inner bg-white/70 backdrop-blur-sm border-2 border-pink-200 focus:border-purple-300 outline-none\"\n            placeholder=\"âœ¨ Add something fun!\"\n          />\n        </form>\n        <ul className=\"space-y-4\">\n          {todos.map(todo => (\n            <li \n              key={todo.id} \n              className={`${todo.color} p-4 rounded-lg shadow-md flex justify-between items-center animate-fade-in`}\n            >\n              <span className=\"text-gray-700\">{todo.text}</span>\n              <button\n                onClick={() => removeTask(todo.id)}\n                className=\"ml-2 text-gray-500 hover:text-red-500 transition-colors\"\n              >\n                âœ–\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }"
      },
      {
        "name": "Professional Dark Mode",
        "description": "Serious, business-like interface with status tracking",
        "code": "function App() {\n    const [inputValue, setInputValue] = useState(\"\");\n    const [tasks, setTasks] = useState([]);\n    \n    const addTask = (e) => {\n      e.preventDefault();\n      if (inputValue.trim()) {\n        setTasks([...tasks, {\n          id: Date.now(),\n          text: inputValue,\n          status: \"pending\"\n        }]);\n        setInputValue(\"\");\n      }\n    };\n    \n    const updateStatus = (id, newStatus) => {\n      setTasks(tasks.map(task =>\n        task.id === id ? { ...task, status: newStatus } : task\n      ));\n    };\n    \n    const deleteTask = (id) => {\n      setTasks(tasks.filter(task => task.id !== id));\n    };\n    \n    return (\n      <div className=\"max-w-2xl mx-auto p-8 bg-gray-900 rounded-lg shadow-2xl\">\n        <h1 className=\"text-3xl font-bold mb-8 text-white\">Project Tasks</h1>\n        <form onSubmit={addTask} className=\"mb-6\">\n          <div className=\"flex gap-4\">\n            <input\n              type=\"text\"\n              value={inputValue}\n              onChange={(e) => setInputValue(e.target.value)}\n              className=\"flex-1 p-3 bg-gray-800 rounded border border-gray-700 text-white focus:border-blue-500 focus:ring-1 focus:ring-blue-500 outline-none\"\n              placeholder=\"Add new task\"\n            />\n            <button\n              type=\"submit\"\n              className=\"px-6 py-3 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors\"\n            >\n              Add\n            </button>\n          </div>\n        </form>\n        <div className=\"space-y-4\">\n          {tasks.map(task => (\n            <div key={task.id} className=\"p-4 bg-gray-800 rounded-lg flex items-center justify-between\">\n              <span className=\"text-white\">{task.text}</span>\n              <div className=\"flex items-center gap-4\">\n                <select\n                  value={task.status}\n                  onChange={(e) => updateStatus(task.id, e.target.value)}\n                  className=\"bg-gray-700 text-white rounded px-3 py-1\"\n                >\n                  <option value=\"pending\">Pending</option>\n                  <option value=\"in-progress\">In Progress</option>\n                  <option value=\"completed\">Completed</option>\n                </select>\n                <button\n                  onClick={() => deleteTask(task.id)}\n                  className=\"text-gray-400 hover:text-red-500 transition-colors\"\n                >\n                  Delete\n                </button>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }"
      },
      {
        "name": "Nature Inspired",
        "description": "Organic, calming design with nature elements",
        "code": "function App() {\n    const [task, setTask] = useState(\"\");\n    const [tasks, setTasks] = useState([]);\n    \n    const handleSubmit = (e) => {\n      e.preventDefault();\n      if (task.trim()) {\n        setTasks([...tasks, {\n          id: Date.now(),\n          text: task,\n          completed: false\n        }]);\n        setTask(\"\");\n      }\n    };\n    \n    const toggleComplete = (id) => {\n      setTasks(tasks.map(task =>\n        task.id === id ? { ...task, completed: !task.completed } : task\n      ));\n    };\n    \n    const removeTask = (id) => {\n      setTasks(tasks.filter(task => task.id !== id));\n    };\n    \n    return (\n      <div className=\"max-w-md mx-auto p-8 bg-gradient-to-b from-green-50 to-green-100 rounded-lg shadow-lg\">\n        <h1 className=\"text-3xl font-serif mb-6 text-green-800 text-center\">\n          ðŸŒ¿ Daily Tasks ðŸŒ¿\n        </h1>\n        <form onSubmit={handleSubmit} className=\"mb-6\">\n          <input\n            type=\"text\"\n            value={task}\n            onChange={(e) => setTask(e.target.value)}\n            className=\"w-full p-3 rounded-lg bg-white/70 border border-green-200 focus:border-green-500 focus:ring-2 focus:ring-green-200 outline-none placeholder-green-700/50\"\n            placeholder=\"Add a new task...\"\n          />\n        </form>\n        <ul className=\"space-y-3\">\n          {tasks.map(task => (\n            <li \n              key={task.id}\n              className=\"group bg-white/80 rounded-lg p-4 shadow-sm hover:shadow-md transition-shadow flex items-center justify-between\"\n            >\n              <div className=\"flex items-center gap-3\">\n                <button\n                  onClick={() => toggleComplete(task.id)}\n                  className={`w-5 h-5 rounded-full border-2 border-green-600 flex items-center justify-center\n                    ${task.completed ? \"bg-green-600\" : \"bg-transparent\"}`}\n                >\n                  {task.completed && <span className=\"text-white text-xs\">âœ“</span>}\n                </button>\n                <span className={`${task.completed ? \"line-through text-green-600/60\" : \"text-green-800\"}`}>\n                  {task.text}\n                </span>\n              </div>\n              <button\n                onClick={() => removeTask(task.id)}\n                className=\"opacity-0 group-hover:opacity-100 text-red-400 hover:text-red-600 transition-opacity\"\n              >\n                Ã—\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }"
      }
    ]
  }